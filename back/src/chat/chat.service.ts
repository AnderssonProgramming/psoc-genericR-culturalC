import { Injectable, Inject } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { SupabaseClient } from '@supabase/supabase-js';
import { SUPABASE_CLIENT } from '../supabase/supabase.module';

@Injectable()
export class ChatService {
  private readonly huggingFaceApiKey: string;
  private readonly useLocalModel: boolean;
  private readonly ollamaBaseUrl: string;
  private readonly ollamaModel: string;
  private readonly systemContext = `Eres un asistente educativo del juego "Gender Quest" sobre roles de g√©nero y equidad.

CONTEXTO DE LA APLICACI√ìN:
- Gender Quest es un quiz interactivo de 10 preguntas sobre roles de g√©nero
- Categor√≠as: Hogar, Sociedad, y Profesional
- Objetivo: Cuestionar estereotipos y promover reflexi√≥n sobre equidad de g√©nero
- Los usuarios responden preguntas y reciben feedback educativo
- Al finalizar obtienen un puntaje y aparecen en un ranking global

TEMAS PRINCIPALES:
1. Roles de g√©nero en el hogar (tareas dom√©sticas, crianza, decisiones)
2. Estereotipos sociales (emociones, apariencia, maternidad/paternidad)
3. Desigualdad en el √°mbito profesional (liderazgo, brecha salarial, oportunidades)

Tu rol es:
‚úÖ Responder preguntas sobre roles de g√©nero, estereotipos y equidad
‚úÖ Explicar conceptos del juego y sus categor√≠as
‚úÖ Proporcionar informaci√≥n educativa y basada en evidencia
‚úÖ Mantener un tono respetuoso, inclusivo y educativo
‚úÖ Responder en espa√±ol de forma concisa (m√°ximo 3-4 p√°rrafos)

‚ùå NO debes:
- Juzgar o criticar las respuestas del usuario
- Dar opiniones pol√≠ticas extremas
- Usar lenguaje ofensivo o discriminatorio`;

  constructor(
    @Inject(SUPABASE_CLIENT) private readonly supabase: SupabaseClient,
    private readonly configService: ConfigService,
  ) {
    this.huggingFaceApiKey = this.configService.get<string>('HUGGINGFACE_API_KEY');
    this.useLocalModel = this.configService.get<string>('USE_LOCAL_MODEL') === 'true';
    this.ollamaBaseUrl = this.configService.get<string>('OLLAMA_BASE_URL') || 'http://localhost:11434';
    this.ollamaModel = this.configService.get<string>('OLLAMA_MODEL') || 'phi3';
    
    if (this.useLocalModel) {
      console.log(`ü§ñ Usando modelo local Ollama: ${this.ollamaModel}`);
    } else if (!this.huggingFaceApiKey || this.huggingFaceApiKey === 'tu_token_aqui') {
      console.warn('‚ö†Ô∏è  HUGGINGFACE_API_KEY no configurado. El chat usar√° respuestas de demostraci√≥n.');
    }
  }

  private async callHuggingFace(messages: any[]): Promise<string> {
    // Prioridad 1: Usar modelo local con Ollama
    if (this.useLocalModel) {
      return this.callOllama(messages);
    }
    
    // Prioridad 2: Usar Hugging Face API
    if (!this.huggingFaceApiKey || this.huggingFaceApiKey === 'tu_token_aqui') {
      // Modo demo sin API key
      return this.getDemoResponse(messages.at(-1).content);
    }

    try {
      // Usar modelo m√°s estable y r√°pido
      // microsoft/Phi-3-mini-4k-instruct es m√°s peque√±o y responde m√°s r√°pido
      const response = await fetch(
        'https://api-inference.huggingface.co/models/microsoft/Phi-3-mini-4k-instruct',
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.huggingFaceApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            inputs: this.formatPromptForPhi(messages),
            parameters: {
              max_new_tokens: 400,
              temperature: 0.7,
              top_p: 0.9,
              do_sample: true,
              return_full_text: false,
            },
            options: {
              wait_for_model: true, // Esperar si el modelo est√° cargando
              use_cache: true,
            },
          }),
        },
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Hugging Face API error:', response.status, errorText);
        
        // Si es error 503 (modelo cargando) o 404, usar demo
        if (response.status === 503 || response.status === 404) {
          console.log('Modelo no disponible, usando respuestas demo');
          return this.getDemoResponse(messages.at(-1).content);
        }
        
        throw new Error('Error al conectar con Hugging Face');
      }

      const data = await response.json();
      
      // Manejar diferentes formatos de respuesta de HF
      if (Array.isArray(data) && data[0]?.generated_text) {
        return data[0].generated_text.trim();
      } else if (data?.generated_text) {
        return data.generated_text.trim();
      } else if (typeof data === 'string') {
        return data.trim();
      }
      
      console.error('Respuesta inesperada de Hugging Face:', data);
      return this.getDemoResponse(messages.at(-1).content);
    } catch (error) {
      console.error('Error calling Hugging Face:', error);
      return this.getDemoResponse(messages.at(-1).content);
    }
  }

  private async callOllama(messages: any[]): Promise<string> {
    try {
      console.log(`ü§ñ Llamando a Ollama (${this.ollamaModel})...`);
      
      const response = await fetch(`${this.ollamaBaseUrl}/api/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: this.ollamaModel,
          messages: [
            {
              role: 'system',
              content: this.systemContext,
            },
            ...messages.map((m) => ({
              role: m.role,
              content: m.content,
            })),
          ],
          stream: false,
          options: {
            temperature: 0.7,
            num_predict: 400,
          },
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Ollama error:', response.status, errorText);
        
        // Si Ollama no est√° disponible, usar demo
        if (response.status === 404 || response.status === 500) {
          console.log('‚ö†Ô∏è  Ollama no disponible. Verifica que est√© instalado y corriendo.');
          console.log('   Instala: https://ollama.ai/download');
          console.log(`   Ejecuta: ollama pull ${this.ollamaModel}`);
          return this.getDemoResponse(messages.at(-1).content);
        }
        
        throw new Error('Error al conectar con Ollama');
      }

      const data = await response.json();
      
      if (data?.message?.content) {
        console.log('‚úÖ Respuesta de Ollama recibida');
        return data.message.content.trim();
      }
      
      console.error('Respuesta inesperada de Ollama:', data);
      return this.getDemoResponse(messages.at(-1).content);
    } catch (error) {
      console.error('Error calling Ollama:', error);
      console.log('üí° Tip: Aseg√∫rate de que Ollama est√© corriendo (ollama serve)');
      return this.getDemoResponse(messages.at(-1).content);
    }
  }

  private formatPrompt(messages: any[]): string {
    let prompt = `<s>[INST] ${this.systemContext}\n\n`;
    
    for (let index = 0; index < messages.length; index++) {
      const msg = messages[index];
      if (msg.role === 'user') {
        if (index === messages.length - 1) {
          prompt += `${msg.content} [/INST]`;
        } else {
          prompt += `${msg.content} [/INST] `;
        }
      } else if (msg.role === 'assistant') {
        prompt += `${msg.content}</s><s>[INST] `;
      }
    }

    return prompt;
  }

  private formatPromptForPhi(messages: any[]): string {
    // Formato para Microsoft Phi-3
    let prompt = `<|system|>\n${this.systemContext}<|end|>\n`;
    
    for (const msg of messages) {
      if (msg.role === 'user') {
        prompt += `<|user|>\n${msg.content}<|end|>\n`;
      } else if (msg.role === 'assistant') {
        prompt += `<|assistant|>\n${msg.content}<|end|>\n`;
      }
    }
    
    prompt += '<|assistant|>\n';
    return prompt;
  }

  private getDemoResponse(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();
    
    // Respuestas contextualizadas sobre la aplicaci√≥n
    if (lowerMessage.includes('gender quest') || lowerMessage.includes('juego') || lowerMessage.includes('aplicaci√≥n')) {
      return `Gender Quest es un juego educativo interactivo dise√±ado para cuestionar estereotipos de g√©nero. Consta de 10 preguntas divididas en tres categor√≠as: Hogar, Sociedad y Profesional.

Al responder, recibir√°s feedback inmediato que te ayudar√° a reflexionar sobre c√≥mo los roles de g√©nero afectan diferentes aspectos de la vida. Al finalizar, tu puntaje se guarda autom√°ticamente en el ranking global, donde puedes comparar tus resultados con otros jugadores.

¬øTe gustar√≠a saber m√°s sobre alguna categor√≠a espec√≠fica del juego?`;
    }
    
    if (lowerMessage.includes('categor√≠a') || lowerMessage.includes('categorias')) {
      return `El quiz tiene 3 categor√≠as principales:

üè† **Hogar**: Explora roles en tareas dom√©sticas, crianza de hijos y toma de decisiones familiares. Cuestiona la idea de que ciertas tareas "pertenecen" a un g√©nero espec√≠fico.

üåç **Sociedad**: Analiza estereotipos sobre emociones, apariencia f√≠sica y presi√≥n social. Reflexiona sobre c√≥mo la sociedad espera que hombres y mujeres se comporten de manera diferente.

üíº **Profesional**: Examina desigualdades en liderazgo, brecha salarial y oportunidades laborales. Identifica barreras que enfrentan diferentes g√©neros en el mundo laboral.

¬øSobre cu√°l categor√≠a te gustar√≠a profundizar?`;
    }

    if (lowerMessage.includes('rol') && lowerMessage.includes('g√©nero')) {
      return `Los roles de g√©nero son expectativas sociales sobre c√≥mo deben comportarse hombres y mujeres. Estos roles no son biol√≥gicos, sino construcciones culturales que var√≠an seg√∫n la sociedad y √©poca.

**Ejemplos comunes:**
- "Las mujeres deben cuidar del hogar" ‚Üí Limita oportunidades profesionales
- "Los hombres no deben mostrar emociones" ‚Üí Afecta salud mental
- "Ciertas profesiones son 'para hombres' o 'para mujeres'" ‚Üí Perpet√∫a desigualdad laboral

El objetivo de Gender Quest es ayudarte a identificar estos estereotipos y reflexionar sobre su impacto. La equidad de g√©nero beneficia a todas las personas al eliminar estas limitaciones arbitrarias.`;
    }

    if (lowerMessage.includes('intentos') || lowerMessage.includes('veces')) {
      return `Cada usuario registrado tiene un l√≠mite de **3 intentos** para completar el quiz. Esto asegura que el ranking sea justo y que cada participaci√≥n sea significativa.

Tu puntaje se guarda autom√°ticamente al finalizar cada intento, y apareces inmediatamente en el ranking global. Puedes ver cu√°ntos intentos te quedan en la pantalla de bienvenida del juego.

Si ya usaste tus 3 intentos, puedes ver el ranking para comparar tus resultados con otros jugadores. ¬øTienes alguna duda sobre c√≥mo funciona el sistema de puntajes?`;
    }

    // Respuesta gen√©rica educativa
    return `¬°Hola! Soy el asistente de Gender Quest üëã

Estoy aqu√≠ para ayudarte con preguntas sobre roles de g√©nero, estereotipos y equidad. Tambi√©n puedo explicarte c√≥mo funciona el juego y sus categor√≠as.

**Puedes preguntarme sobre:**
- Los roles de g√©nero en diferentes √°mbitos (hogar, sociedad, trabajo)
- C√≥mo funcionan las categor√≠as del quiz
- Informaci√≥n sobre estereotipos y su impacto
- Conceptos de equidad e igualdad de g√©nero

¬øEn qu√© puedo ayudarte?`;
  }

  async sendMessage(userId: string, message: string, sessionId?: string) {
    // Get or create session
    let session;
    if (sessionId) {
      const { data } = await this.supabase
        .from('chat_sessions')
        .select('*')
        .eq('id', sessionId)
        .eq('user_id', userId)
        .single();
      session = data;
    }

    if (!session) {
      // Create new session
      const { data: newSession } = await this.supabase
        .from('chat_sessions')
        .insert({
          user_id: userId,
          messages: [],
        })
        .select()
        .single();
      session = newSession;
    }

    // Get conversation history
    const messages = session.messages || [];
    messages.push({
      role: 'user',
      content: message,
      timestamp: new Date().toISOString(),
    });

    // Call Hugging Face API
    const conversationMessages = messages.map((m) => ({
      role: m.role,
      content: m.content,
    }));
    
    const assistantMessage = await this.callHuggingFace(conversationMessages);

    // Save assistant response
    messages.push({
      role: 'assistant',
      content: assistantMessage,
      timestamp: new Date().toISOString(),
    });

    // Update session
    await this.supabase
      .from('chat_sessions')
      .update({ messages })
      .eq('id', session.id);

    return {
      sessionId: session.id,
      message: assistantMessage,
      timestamp: new Date().toISOString(),
    };
  }

  async getChatHistory(userId: string, sessionId: string) {
    const { data: session } = await this.supabase
      .from('chat_sessions')
      .select('messages')
      .eq('id', sessionId)
      .eq('user_id', userId)
      .single();

    if (!session) {
      return [];
    }

    return session.messages || [];
  }

  async getUserSessions(userId: string) {
    const { data: sessions } = await this.supabase
      .from('chat_sessions')
      .select('id, started_at, messages')
      .eq('user_id', userId)
      .order('started_at', { ascending: false });

    return sessions.map((s) => ({
      id: s.id,
      startedAt: s.started_at,
      messageCount: s.messages?.length || 0,
      lastMessage: s.messages?.at(-1)?.content?.substring(0, 100) || '',
    }));
  }
}
